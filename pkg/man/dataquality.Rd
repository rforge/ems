% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataquality.R
\name{dataquality}
\alias{dataquality}
\alias{factor.table}
\alias{num.table}
\alias{t_factor}
\alias{t_num}
\title{Collection of function to check data quality in a dataset}
\usage{
t_factor(data, variable, legal, var.labels = attr(data,
  "var.labels")[match(variable, names(data))], digits = 3)

factor.table(data, limits, var.labels = attr(data,
  "var.labels")[match(unlist(sapply(seq_along(limits), function(i)
  limits[[i]][1])), names(data))], digits = 3)

t_num(data, num.var, num.max = 100, num.min = 0, var.labels = attr(data,
  "var.labels")[match(num.var, names(data))], digits = 3)

num.table(data, num.limits, var.labels = attr(data,
  "var.labels")[match(num.limits$num.vars, names(data))], digits = 3)
}
\arguments{
\item{data}{A data.frame where variables will be tested.}

\item{variable}{Acharacter vector of length one, indicating the variable name in dataset to be tested.}

\item{legal}{A character vector representeing the expected levels of the tested variable.}

\item{var.labels}{Variables labels to nice output. Must be iformed in the same order as variable argument. By default, it captures the labels stored in attr(data, "var.labels"), if any.}

\item{digits}{Decimal for rounding}

\item{limits}{a list of two or more lists, each containing the arguments variable and legal (in this order). See examples.}

\item{num.var}{A character vector indicating the name of a variable that should be numeric (althoug it can yet be formated as character or factor).}

\item{num.max, num.min}{The limits of acceptable range of a numeric variable.}

\item{num.limits}{A data.frame with the following variables: num.vars, num.max and num.min. See example.}
}
\description{
These functionsn return the counts and fractions of expected values, unexpected values, missing values and non valid values.

\code{t_factor} and \code{factor.table} will try to get factor or character variables and check how much of its content match with the expectd. They will try to treat the levels or cells with "" as NAs.

\code{t_num} will try to get a numeric variable and check how much of its content are expected (match a desired range), unexpected, nonnumeric values and missing vlaues. \code{num.table} does the same thing, but with two or more variables at once.
}
\examples{
# Simulating a dataset with 4 factor variables and assigning labels
y <- data.frame(Var1 = sample(c("Yes","No", "Ignored", "", "yes ", NA), 200, replace = TRUE),
                Var2 = sample(c("Death","Discharge", "", NA), 200, replace = TRUE),
                Var3 = sample(c(16:35, NA), 200, replace = TRUE),
                Var4 = sample(c(12:300, "Female", "", NA), 200, replace = TRUE))
attr(y, "var.labels") <- c("Intervention use","Unit detination","BMI","Age")

# Cheking the quality only the first variable
t_factor(y, "Var1", c("Yes","No","Ignored"))

# Checkin two or more variables at once
factor.table(y, limits = list(
                          list("Var1",c("Yes","No")),
                          list("Var2",c("Death","Discharge"))))

# Checking only one "numeric" variable
t_num(y,"Var3", num.min = 17, num.max = 32)

# Making the limits data.frame
num.limits <- data.frame(num.vars = c("Var3","Var4"),
              num.min = c(17,18), num.max = c(32,110))
num.limits

# Checkin ntwo or more numeric variables at once
num.table(y, num.limits)

rm(y)

}

